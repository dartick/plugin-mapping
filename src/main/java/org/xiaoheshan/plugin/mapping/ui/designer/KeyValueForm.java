package org.xiaoheshan.plugin.mapping.ui.designer;

import com.intellij.openapi.ui.DialogWrapper;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import org.xiaoheshan.plugin.mapping.core.constant.TextConstant;
import org.xiaoheshan.plugin.mapping.ui.dialog.DialogAdapter;
import org.xiaoheshan.plugin.mapping.util.StringUtil;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.awt.*;

/**
 * @author _Chf
 * @date 2017-12-17
 */
public class KeyValueForm implements DialogAdapter {

    private JPanel contentPanel;
    private JTextField originTextField;
    private JTextField destinationTextField;

    private DialogWrapper dialogWrapper;

    public KeyValueForm(DialogWrapper dialogWrapper) {
        this.dialogWrapper = dialogWrapper;
        EnAbleDoOkListener enAbleDoOkListener = new EnAbleDoOkListener();
        originTextField.getDocument().addDocumentListener(enAbleDoOkListener);
        destinationTextField.getDocument().addDocumentListener(enAbleDoOkListener);
    }

    @Override
    public JPanel getTopPanel() {
        return contentPanel;
    }

    @Override
    public String getTitle() {
        return TextConstant.PLUGIN_NAME;
    }

    @Override
    public void onOk() {

    }

    @Override
    public void onCancel() {

    }

    public String getOrigin() {
        return originTextField.getText();
    }

    public String getDestination() {
        return destinationTextField.getText();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPanel = new JPanel();
        contentPanel.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPanel.add(panel1, new GridConstraints(0, 1, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        originTextField = new JTextField();
        panel1.add(originTextField, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        destinationTextField = new JTextField();
        panel1.add(destinationTextField, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Origin : ");
        contentPanel.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Destination : ");
        contentPanel.add(label2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPanel;
    }

    private class EnAbleDoOkListener implements DocumentListener {

        @Override
        public void insertUpdate(DocumentEvent e) {
            isEnAbleDoOk();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            isEnAbleDoOk();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
        }

        private void isEnAbleDoOk() {
            boolean enable = !(StringUtil.isBlank(originTextField.getText())
                    || StringUtil.isBlank(destinationTextField.getText()));
            if (enable) {
                KeyValueForm.this.dialogWrapper.setOKActionEnabled(true);
            } else {
                KeyValueForm.this.dialogWrapper.setOKActionEnabled(false);
            }
        }
    }

}
